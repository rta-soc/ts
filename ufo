#### ЮФО
import pandas as pd
text1 = pd.read_excel('')
text2 = pd.read_excel('')
text3 = pd.read_excel('')
text4 = pd.read_excel('')
text5 = pd.read_excel('')
text6 = pd.read_excel('')
text7 = pd.read_excel('')
text8 = pd.read_excel('')
text9 = pd.read_excel('')
text10 = pd.read_excel('')
text11 = pd.read_excel('')

import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict

# 1. Определяем функции предобработки текста
def preprocess_lemmas(lemmas_series):
    """Функция предобработки лемм (аналогичная вашей предыдущей реализации)"""
    lemmas_series = lemmas_series.dropna()
    
    def ensure_list(x):
        if isinstance(x, float):
            return []
        if isinstance(x, str):
            return x.split()
        if isinstance(x, list):
            return x
        return []
    
    lemmas_series = lemmas_series.apply(ensure_list)
    lemmas_series = lemmas_series.apply(lambda lst: [word.lower().strip() for word in lst if word.strip()])
    return lemmas_series

def categorize_text(text_lemmas, mapping):
    """Функция категоризации текста"""
    try:
        return [mapping[lemma] for lemma in text_lemmas if lemma in mapping]
    except (TypeError, KeyError):
        return []


#Загрузка словаря из Excel (если он еще не загружен)
voc_content = pd.read_excel('C:/Users/Т/common_words100.xlsx')

import pandas as pd
from collections import Counter

# 1. Загрузка и подготовка словаря
# Создаем mapping код → категория
category_map = {
    12: "патриотизм"
}
# Создаем словарь {лемма: категория}
lemma_to_category = {}
for _, row in voc_content.iterrows():
    lemma = str(row['word']).lower().strip() if pd.notna(row['word']) else None
    code = row['code']
    if lemma and pd.notna(code):
        lemma_to_category[lemma] = category_map.get(code, 'unknown')
                
# Словарь соответствия переменных и регионов
region_data = {
    'Краснодарский край': text1,
    'Адыгея': text2,
    'Севастополь': text3,
    'Крым': text4,
    'Астраханская область': text5,
    'Волгоградская область': text6,
    'Калмыкия': text7,
    'ДНР': text8,
    'ЛНР': text9,
    'Запорожская область': text10,
    'Херсонская область': text11,
    }

for region_name, df in region_data.items():
    df['region'] = region_name
all_regions = pd.concat(region_data.values(), ignore_index=True)

# 2. Преобразование дат
all_regions['date'] = pd.to_datetime(all_regions['date'], errors='coerce')  # 'coerce' для обработки некорректных дат

# 4. Теперь применяем обработку корректно
all_regions['lemmas'] = preprocess_lemmas(all_regions['text_clean_lemma_as_str'])
all_regions['categories'] = all_regions['lemmas'].apply(lambda x: categorize_text(x, lemma_to_category))

# 5. Анализ по категории 
economics = all_regions[all_regions['categories'].apply(lambda x: 'патриотизм' in x)]
economics_dynamic = economics.groupby([pd.Grouper(key='date', freq='ME'), 'region']).size().unstack(fill_value=0)

# 5. Визуализация
plt.figure(figsize=(16, 8))
for region in economics_dynamic.columns:
    plt.plot(economics_dynamic.index, economics_dynamic[region], label=region, alpha=0.7)

plt.title('Динамика упоминаний патриотизма по регионам')
plt.xlabel('Дата')
plt.ylabel('Количество упоминаний')
plt.legend(bbox_to_anchor=(1.05, 1))
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()
